<?php

/*
 * This file is part of CLI Press.
 *
 * The MIT License (MIT)
 * Copyright Â© 2017
 *
 * Alex Carter, alex@blazeworx.com
 * Keith E. Freeman, cli-press@forsaken-threads.com
 *
 * For the full copyright and license information, please view the LICENSE
 * file that should have been distributed with this source code.
 */

namespace BlazingThreads\CliPress\Commands;

use BlazingThreads\CliPress\Exception;
use BlazingThreads\CliPress\Managers\TemplateManager;
use mikehaertl\wkhtmlto\Pdf;

class Generate extends BaseCommand
{
    protected $config;

    /**
     * @var \ParsedownExtra
     */
    protected $parseDown;

    /**
     * @var TemplateManager
     */
    protected $templateManager;

    /**
     * @var string
     */
    protected $workingPath;

    /**
     * @inheritdoc
     */
    protected function configure()
    {
        $this
            ->setName('generate')
            ->setDescription('Start up the press and make something beautiful');
    }

    /**
     * @inheritdoc
     */
    protected function exec()
    {
        $this->setWorkingPath();
        $this->templateManager = app()->make('managers.template');
        $this->parseDown = new \ParsedownExtra();
        $this->config = [
            'theme' => 'cli-press',
            'title' => 'Generated by CLI Press',
        ];

        if (file_exists('cli-press.json')) {
            $json = json_decode(file_get_contents('cli-press.json'), true);
            if (json_last_error() === JSON_ERROR_NONE) {
                $this->config = array_merge($this->config, $json);
            }
        }

        if (empty($this->config['filename'])) {
            $this->config['filename'] = preg_replace('/[^\w\._-]/', '-', $this->config['title']);
        }

        if (!empty($this->config['theme'])) {
            if ($this->config['theme'] == 'cli-press' || !file_exists(dirname($this->getThemePath('file', $this->config['theme'])))) {
                $this->config['theme'] = false;
            }
        }

        $this->output->writeln('<comment>Starting the press</comment>');

        $pdf = new Pdf();

        $coverPageHtml = $this->generateCoverPageHtml();

        if ($coverPageHtml) {
            $this->saveWorkingFile('cli-press_cover.html', $coverPageHtml);
            $pdf->addCover($this->getWorkingFilePath('cli-press_cover.html'));
            $this->config['hasCover'] = true;
        }

        $pdf->setOptions([
            'header-html' => $this->getWorkingFilePath('cli-press_header.html'),
            'footer-html' => $this->getWorkingFilePath('cli-press_footer.html'),
        ]);

        $this->saveWorkingFile('cli-press_header.html', $this->generateHeaderHtml($this->config['title']));
        $this->saveWorkingFile('cli-press_body.html', $this->generateBodyHtml(glob('*.md')));
        $this->saveWorkingFile('cli-press_footer.html', $this->generateFooterHtml());

        $pdf->addToc([
            'xsl-style-sheet' => $this->getToc()
        ]);

        $pdf->addPage($this->getWorkingFilePath('cli-press_body.html'));

        if (!$pdf->saveAs($this->config['filename'] . '.pdf')) {
            $this->output->write('<fg=red>ERROR:</fg=red> ' . $pdf->getError());
        } else {
            $this->output->write("<info>Complete!</info>\n");
        }
    }

    private function generateCoverPageHtml() {
        if (!file_exists('cover.md')) {
            return '';
        }
        $coverContent = $this->parseDown->parse(file_get_contents('cover.md'));
        $coverContent = $this->faParse($coverContent, $withFA);
        $baseCss = $this->getThemeFile('cover.css', [], true);
        $themeCss = $this->getThemeFile('cover.css');
        $now = date('Y-m-d H:i:s');
        $cover = $this->getFirstFile('cover.html.twig', compact('coverContent', 'now'));
        return $this->getFirstFile('cover-layout.html.twig', compact('baseCss', 'themeCss', 'cover', 'withFA'));
    }

    private function generateHeaderHtml($title) {
        $baseCss = $this->getThemeFile('header.css', [], true);
        $themeCss = $this->getThemeFile('header.css');
        $header = $this->parseDown->parse($this->getFirstFile('header.html.twig', compact('title')));
        $header = $this->faParse($header, $withFA);
        return $this->getFirstFile('header-layout.html.twig', compact('baseCss', 'themeCss', 'header', 'withFA'));
    }

    private function generateFooterHtml() {
        $baseCss = $this->getThemeFile('footer.css', [], true);
        $themeCss = $this->getThemeFile('footer.css');
        $footer = $this->parseDown->parse($this->getFirstFile('footer.html.twig'));
        $footer = $this->faParse($footer, $withFA);
        return $this->getFirstFile('footer-layout.html.twig', compact('baseCss', 'themeCss', 'footer', 'withFA'));
    }

    private function generateBodyHtml($files) {
        $baseCss = $this->getThemeFile('body.css', [], true);
        $themeCss = $this->getThemeFile('body.css');
        $html = '';
        foreach ($files as $file) {
            if (!empty($this->config['hasCover']) && $file == 'cover.md') {
                continue;
            }
            $html .= $this->parseDown->parse(file_get_contents($file));
        }
        $html = $this->faParse($html, $withFA);
        return $this->getFirstFile('body-layout.html.twig', compact('baseCss', 'themeCss', 'html', 'withFA'));
    }

    private function getFirstFile($file, $variables = [])
    {
        $themeFile = empty($this->config['theme']) ? false : $this->getThemePath($file, $this->config['theme']);
        return $this->getThemeFile($file, $variables, !$themeFile || !file_exists(($themeFile)));
    }

    private function getThemeFile($file, $variables = [], $baseTheme = false)
    {
        if (!$baseTheme && empty($this->config['theme'])) {
            return '';
        }
        $filename = $this->getThemePath($file, !$baseTheme ? $this->config['theme'] : 'cli-press');
        return $this->templateManager->render($filename, $variables);
    }

    private function getThemePath($file, $theme)
    {
        return "$theme/$file";
    }

    private function getToc()
    {
        $baseToc = $this->getThemePath('toc.xsl', 'cli-press');
        $themeToc = $this->getThemePath('toc.xsl', !empty($this->config['theme']) ? $this->config['theme'] : 'cli-press');
        return __DIR__ . '/../Themes/' . (file_exists(__DIR__ . "/../Themes/$themeToc") ? $themeToc : $baseToc);
    }

    private function getWorkingFilePath($file)
    {
        return $this->workingPath . DIRECTORY_SEPARATOR . $file;
    }

    private function faParse($markup, &$count)
    {
        return preg_replace_callback('/(@|)\{f@([a-z0-9 -]+)\}/', function($matches) {
            if ($matches[1]) {
                return substr($matches[0], 1);
            }
            $matches = explode(' ', $matches[2]);
            $icon = array_shift($matches);
            $classes = '';
            foreach ($matches as $class) {
                if (preg_match('/^(lg|[2-5]x)|(rotate-(9|18|27)0)|flip-(horizontal|vertical)/', $class)) {
                    $classes .= ' fa-' . $class;
                }
            }
            return "<i class=\"fa fa-$icon$classes\"></i>";
        }, $markup, -1, $count);
    }

    private function saveWorkingFile($file, $contents)
    {
        file_put_contents($this->workingPath . DIRECTORY_SEPARATOR . $file, $contents);
    }

    private function setWorkingPath()
    {
        $this->workingPath = sys_get_temp_dir() . '/cli-press_' . md5(app()['path.project']);
        if (!file_exists($this->workingPath)) {
            @mkdir($this->workingPath);
        }

        if (!is_dir($this->workingPath)) {
            throw new Exception('Failed to create working path: ' . $this->workingPath);
        }

        // bind this to the application which will take care of removing it during shutdown
        app()['path.working'] = $this->workingPath;
    }
}
