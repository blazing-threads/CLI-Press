<?php

/*
 * This file is part of CLI Press.
 *
 * The MIT License (MIT)
 * Copyright Â© 2017
 *
 * Alex Carter, alex@blazeworx.com
 * Keith E. Freeman, cli-press@forsaken-threads.com
 *
 * For the full copyright and license information, please view the LICENSE
 * file that should have been distributed with this source code.
 */

namespace BlazingThreads\CliPress\Commands;

use BlazingThreads\CliPress\CliPressException;
use BlazingThreads\CliPress\Managers\LeafManager;
use BlazingThreads\CliPress\Managers\TemplateManager;
use BlazingThreads\CliPress\PressdownParser;
use mikehaertl\wkhtmlto\Pdf;
use Symfony\Component\Console\Input\InputOption;

class Generate extends BaseCommand
{

    /**
     * Default per-directory configuration
     * @var array
     */
    protected $baseConfig = [
        'auto-page-break' => true,
        'book-toc' => true,
        'chapter-toc' => false,
        'extensions' => ['md', 'pd', 'html'],
        'ignore' => ['vendor'],
        'theme' => 'cli-press',
        'title' => 'Generated by CLI Press',
    ];

    /**
     * Current press directory configuration
     * @var array
     */
    protected $config;

    /**
     * Stack of press directory configurations
     * @var array
     */
    protected $configStack = [];

    /**
     * List of path patterns to ignore
     * @var array
     */
    protected $ignored;

    /**
     * @var LeafManager
     */
    protected $leafManager;

    /**
     * @var \ParsedownExtra
     */
    protected $parseDown;

    /**
     * @var PressdownParser
     */
    protected $pressDown;

    /**
     * Current press directory
     * @var string
     */
    protected $pressDirectory;

    /**
     * Path to root press directory
     * @var string
     */
    protected $pressRootPath;

    /**
     * @var TemplateManager
     */
    protected $templateManager;

    /**
     * Current working directory
     * @var string
     */
    protected $workingDirectory;

    /**
     * Path to root working directory
     * @var string
     */
    protected $workingRootPath;

    protected function addTableOfContents()
    {
        $xsl = new \DOMDocument();
        $xsl->load($this->getWorkingFilePath('outline.xml'));

        $pdf = new Pdf();

        $pdf->addPage($this->getWorkingFilePath('cli-press_toc.html'));

        if (!$pdf->saveAs($this->getWorkingFilePath('cli-press_toc.pdf'))) {
            throw new CliPressException("Error processing table of contents: " . $pdf->getError());
        }

        $this->leafManager->addFile($this->getWorkingFilePath('cli-press_toc.pdf'));
    }

    /**
     * @inheritdoc
     */
    protected function configure()
    {
        $this
            ->setName('generate')
            ->addOption('keep-working', null, InputOption::VALUE_NONE, 'Do not remove the working directory when done')
            ->setDescription('Start up the press and make something beautiful');
    }

    /**
     * @inheritdoc
     */
    protected function exec()
    {
        $this->setWorkingRootPath();
        $this->templateManager = app()->make('managers.template');
        $this->leafManager = app()->make('managers.leaf');
        $this->parseDown = new \ParsedownExtra();
        $this->pressDown = new PressdownParser();

        $this->output->writeln('<comment>Starting the press</comment>');

        $this->pressRootPath = getcwd();

        $this->generateRecursively($this->pressRootPath);

        if (!chdir($this->pressRootPath)) {
            throw new CliPressException('Failed to change press directory to: ' . $this->pressRootPath);
        }

        if ($this->config['book-toc']) {
            $this->addTableOfContents();
        }

        $this->output->writeln(
            !$this->leafManager->merge($this->config['filename'] . '.pdf')
                ? "<error>Could not save to {$this->config['filename']}.pdf</error>"
                : "<comment>Saved to {$this->config['filename']}.pdf</comment>"
        );
    }

    /**
     * Generates an HTML file for all of the files provided
     * @param $files
     * @return string
     */
    protected function generateBodyHtml($files) {
        $baseCss = $this->getThemeFile('body.css', [], true);
        $themeCss = $this->getThemeFile('body.css');
        $html = '';
        while ($file = array_shift($files)) {
            if (is_dir($file) || $this->isIgnored($file)) {
                $this->debug((is_file($file) ? 'skipping directory ' : 'ignoring ') . $file);
                continue;
            }

            if (!empty($this->config['hasCover']) && $file == 'cover.md') {
                continue;
            }

            $html .= $this->parseDown->parse(file_get_contents($file));

            // insert a page break between files if configured
            if (!empty($files) && $this->config['auto-page-break']) {
                $html .= "\n{break}\n";
            }
        }
        $html = $this->pressDown->parse($html);
        $withFA = $html->hasFA();
        return $this->getFirstFile('body-layout.html.twig', compact('baseCss', 'themeCss', 'html', 'withFA'));
    }

    /**
     * Generates an HTML cover page from a cover.md file
     * @return string
     */
    protected function generateCoverPageHtml() {
        if (!file_exists('cover.md')) {
            return '';
        }
        $coverContent = $this->parseDown->parse(file_get_contents('cover.md'));
        $coverContent = $this->pressDown->parse($coverContent);
        $withFA = $coverContent->hasFA();
        $baseCss = $this->getThemeFile('cover.css', [], true);
        $themeCss = $this->getThemeFile('cover.css');
        $now = date('Y-m-d H:i:s');
        $cover = $this->getFirstFile('cover.html.twig', compact('coverContent', 'now'));
        return $this->getFirstFile('cover-layout.html.twig', compact('baseCss', 'themeCss', 'cover', 'withFA'));
    }

    /**
     * Generates the Footer HTML
     * @return string
     */
    protected function generateFooterHtml() {
        $baseCss = $this->getThemeFile('footer.css', [], true);
        $themeCss = $this->getThemeFile('footer.css');
        $footer = $this->parseDown->parse($this->getFirstFile('footer.html.twig'));
        $footer = $this->pressDown->parse($footer);
        $withFA = $footer->hasFA();
        return $this->getFirstFile('footer-layout.html.twig', compact('baseCss', 'themeCss', 'footer', 'withFA'));
    }

    /**
     * Generates the Header HTML using the given title
     * @param $title
     * @return string
     */
    protected function generateHeaderHtml($title) {
        $baseCss = $this->getThemeFile('header.css', [], true);
        $themeCss = $this->getThemeFile('header.css');
        $header = $this->parseDown->parse($this->getFirstFile('header.html.twig', compact('title')));
        $header = $this->pressDown->parse($header);
        $withFA = $header->hasFA();
        return $this->getFirstFile('header-layout.html.twig', compact('baseCss', 'themeCss', 'header', 'withFA'));
    }

    /**
     * @param string $pressDirectory
     * @throws CliPressException
     */
    protected function generateRecursively($pressDirectory)
    {
        if (!chdir($pressDirectory)) {
            throw new CliPressException('Failed to change press directory to: ' . $pressDirectory);
        }

        $this->pressDirectory = $pressDirectory;
        $this->setConfiguration();
        $this->setIgnored();

        $chapters = glob($pressDirectory . DIRECTORY_SEPARATOR . '*', GLOB_ONLYDIR);
        foreach ($chapters as $directory) {
            if ($this->isIgnored($directory)) {
                $this->debug("ignoring $directory");
                continue;
            }

            $this->generateRecursively($directory);
        }

        if (!empty($chapters)) {
            if (!chdir($pressDirectory)) {
                throw new CliPressException('Failed to change press directory to: ' . $pressDirectory);
            }

            $this->pressDirectory = $pressDirectory;
            $this->setConfiguration();
            $this->setIgnored();
        }

        $pressFiles = glob('*.{' . implode(',', $this->config['extensions']) . '}', GLOB_BRACE);

        if(!empty($pressFiles)) {

            $this->debug("generating leaf $pressDirectory");

            $this->setWorkingDirectory();

            $pdf = new Pdf([
                'dump-outline' => $this->workingRootPath . str_replace($this->pressRootPath, '', $pressDirectory) . DIRECTORY_SEPARATOR . 'outline.xml',
            ]);

            $coverPageHtml = $this->generateCoverPageHtml();

            if ($coverPageHtml) {
                $this->saveWorkingFile('cli-press_cover.html', $coverPageHtml);
                $this->config['hasCover'] = true;
                if (!$this->isRootDocument()) {
                    $pdf->addCover($this->getWorkingFilePath('cli-press_cover.html'));
                }
            }

            $pdf->setOptions([
                'header-html' => $this->getWorkingFilePath('cli-press_header.html'),
                'footer-html' => $this->getWorkingFilePath('cli-press_footer.html'),
            ]);

            $this->saveWorkingFile('cli-press_header.html', $this->generateHeaderHtml($this->config['title']));
            $this->saveWorkingFile('cli-press_body.html', $this->generateBodyHtml($pressFiles));
            $this->saveWorkingFile('cli-press_footer.html', $this->generateFooterHtml());

            if (!$this->isChapter() || $this->config['chapter-toc']) {
//                $pdf->addToc([
//                    'xsl-style-sheet' => $this->getToc(),
//                ]);
            }

            $pdf->addPage($this->getWorkingFilePath('cli-press_body.html'));

            if (!$pdf->saveAs($this->getWorkingFilePath($this->config['filename'] . '.pdf'))) {
                throw new CliPressException("Error processing leaf $pressDirectory: " . $pdf->getError());
            }

            $this->leafManager->addFile($this->getWorkingFilePath($this->config['filename'] . '.pdf'));

            $this->debug('added file: ' . $this->getWorkingFilePath($this->config['filename'] . '.pdf'));

            $this->verbose("<info>processed leaf $pressDirectory</info>");
        }

//        if (!$this->isRootDocument()) {
//            $this->config = array_pop($this->configStack);
//            $this->setIgnored();
//        }
//
        $this->debug('finished in ' . $pressDirectory);
    }

    /**
     * Find the first theme file defined for the given file.
     * If no theme defines the file, use the base theme.
     * @param $file
     * @param array $variables
     * @return string
     */
    protected function getFirstFile($file, $variables = [])
    {
        $themeFile = empty($this->config['theme']) ? false : $this->getThemePath($file, $this->config['theme']);
        return $this->getThemeFile($file, $variables, $themeFile === false || !$this->templateManager->themeHasFile($themeFile));
    }

    /**
     * @param $file
     * @param array $variables
     * @param bool $baseTheme
     * @return string
     */
    protected function getThemeFile($file, $variables = [], $baseTheme = false)
    {
        if (!$baseTheme && empty($this->config['theme'])) {
            return '';
        }
        $filename = $this->getThemePath($file, !$baseTheme ? $this->config['theme'] : 'cli-press');

        $this->debug("rendering $filename");

        return $this->templateManager->render($filename, $variables);
    }

    /**
     * @param $file
     * @param $theme
     * @return string
     */
    protected function getThemePath($file, $theme)
    {
        return "$theme/$file";
    }

    /**
     * @return string
     */
    protected function getToc()
    {
        $baseToc = $this->getThemePath('toc.xsl', 'cli-press');
        $themeToc = $this->getThemePath('toc.xsl', !empty($this->config['theme']) ? $this->config['theme'] : 'cli-press');
        return __DIR__ . '/../Themes/' . (file_exists(__DIR__ . "/../Themes/$themeToc") ? $themeToc : $baseToc);
    }

    /**
     * @param $file
     * @return string
     */
    protected function getWorkingFilePath($file)
    {
        return $this->workingDirectory . DIRECTORY_SEPARATOR . $file;
    }

    /**
     * @return bool
     */
    protected function isChapter()
    {
        return $this->pressDirectory !== $this->pressRootPath;
    }

    /**
     * @param $path
     * @return bool
     */
    protected function isIgnored($path)
    {
        $path = basename($path);
        foreach ($this->ignored as $ignore) {
            if (preg_match('/' . $ignore . '/', $path)) {
                return true;
            }
        }

        return false;
    }

    /**
     * @return bool
     */
    protected function isRootDocument()
    {
        return $this->pressRootPath === $this->pressDirectory;
    }

    /**
     * @param array $base
     * @param array $overlay
     * @return array
     */
    protected function mergeConfigurations(array $base, array $overlay)
    {
        $result = [];

        if (key_exists('ignore', $overlay)) {
            $result['ignore'] = $overlay['ignore'];
        } elseif (key_exists('ignore', $base)) {
            $result['ignore'] = $base['ignore'];
        } else {
            $result['ignore'] = [];
        }

        unset($base['ignore'], $overlay['ignore']);

        return array_merge($result, $base, $overlay);
    }

    /**
     * Sets the configuration for the current press directory.
     * If there is already an active configuration, it gets pushed onto the stack.
     */
    protected function setConfiguration()
    {
        // push the current configuration onto the stack
        if (empty($this->config)) {
            $this->config = $this->baseConfig;
        }

        array_push($this->configStack, $this->config);

        if (file_exists('cli-press.json')) {
            $json = json_decode(file_get_contents('cli-press.json'), true);
            if (json_last_error() === JSON_ERROR_NONE) {
                $this->config = $this->mergeConfigurations($this->config, $json);
            }
        }

        if (empty($this->config['filename'])) {
            $this->config['filename'] = preg_replace('/[^\w\._-]/', '-', $this->config['title']);
        }

        if (!empty($this->config['theme'])) {
            if ($this->config['theme'] == 'cli-press') {
                $this->config['theme'] = false;
            }
        }

        $this->validateConfiguration();

        $this->debug(['Configuration for ' . $this->pressDirectory, json_encode($this->config, JSON_PRETTY_PRINT)]);
    }

    protected function setIgnored()
    {
        $ignored = [];

        $stack = $this->configStack;
        $stack[] = $this->config;

        foreach ($stack as $config) {
            foreach ($config['ignore'] as $path) {
                if ($path[0] === '!') {
                    unset($ignored[substr($path, 1)]);
                } else {
                    $ignored[$path] = str_replace('*', '\\.*', $path);
                }
            }
        }

        $this->ignored = $ignored;

        $this->debug(['Ignoring:', json_encode($ignored, JSON_PRETTY_PRINT)]);
    }

    /**
     * Save a working file into the current working directory
     * @param $file
     * @param $contents
     */
    protected function saveWorkingFile($file, $contents)
    {
        file_put_contents($this->workingDirectory . DIRECTORY_SEPARATOR . $file, $contents);
    }

    /**
     * @throws CliPressException
     */
    protected function setWorkingDirectory()
    {
        $this->workingDirectory = $this->workingRootPath . str_replace($this->pressRootPath, '', $this->pressDirectory);
        if (!is_dir($this->workingDirectory) && !mkdir($this->workingDirectory, 0755, true)) {
            throw new CliPressException('Failed to create working directory: ' . $this->workingDirectory);
        }

        $this->debug("set working directory: $this->workingDirectory");
    }

    /**
     * Set the root path for the working directory
     * @throws CliPressException
     */
    protected function setWorkingRootPath()
    {
        $this->workingRootPath = sys_get_temp_dir() . '/cli-press_' . md5(app()['path.project']);
        if (!file_exists($this->workingRootPath)) {
            @mkdir($this->workingRootPath);
        }

        if (!is_dir($this->workingRootPath)) {
            throw new CliPressException('Failed to create working path: ' . $this->workingRootPath);
        }

        if (! $this->input->getOption('keep-working')) {
            // bind this to the application which will take care of removing it during shutdown
            app()['path.working'] = $this->workingRootPath;
        }
    }

    /**
     * @throws CliPressException
     */
    protected function validateConfiguration()
    {
        if (empty($this->config['extensions']) || !is_array($this->config['extensions'])) {
            throw new CliPressException('Configuration directive "extensions" must be a non-empty array');
        }
    }
}
